// 1) VARIABILI IN SASS
// vedi partial variables.scss
@import "./partials/variables";

// importo i reset
@import "./partials/reset";
@import "./partials/placeholders";
@import "./partials/mixins";

.container {
  width: 100%;
  margin: {
    left: auto;
    right: auto;
  }

  padding: {
    left: $size-2;
    right: $size-2;
  }

  @media screen and (min-width: 576px) {
    max-width: 530px;
  }
  @media screen and (min-width: 768px) {
    max-width: 730px;
  }
  @media screen and (min-width: 992px) {
    max-width: 970px;
  }
  @media screen and (min-width: 1200px) {
    max-width: 1170px;
  }
  @media screen and (min-width: 1400px) {
    max-width: 1370px;
  }
}

// @media screen and (min-width: 576px) {
//   .container {
//     max-width: 530px;
//   }
// }

// main section {
//   padding-block: $size-4;
// }

// main section ul {
//   padding-inline-start: unset;
//   list-style: none;
// }

// main section ul li {
//   display: inline-block;
//   margin-right: $size-2;
// }

// DRY - Don't Repeat Yourself

// 2) NESTING CSS - Selettori annidati

main {
  section {
    padding-block: $size-4;

    @media screen and (min-width: 576px) {
      padding-block: $size-2;
    }
    @media screen and (min-width: 992px) {
      padding-block: $size-5;
    }

    &:nth-of-type(even) {
      background-color: #ebebeb;
    }

    ul {
      padding-inline-start: unset;
      //   list-style: none;
      li {
        // display: inline-block;
        margin-right: $size-2;

        &:hover {
          // 3) parent selector & (riprende tutti gli elementi nella catena, e aggiunge ::marker alla fine. es. main section ul li::marker )
          &::marker {
            content: "üìå";
          }
        }
        &:active {
          &::marker {
            content: "üìç";
          }
        }
      }

      &:hover {
        background-color: antiquewhite;
      }
    }

    .button {
      display: inline-block;
      border-radius: 3px;
      padding: 7px 12px;
      border: 1px solid #d5d5d5;
      background-image: linear-gradient(#eee, #ddd);
      font: 700 13px/18px Helvetica, arial;

      &--state-success {
        color: #fff;
        background: #569e3d linear-gradient(#79d858, #569e3d) repeat-x;
        border-color: #4a993e;
      }

      &--state-danger {
        color: #900;
      }
    }
  }
}

.header {
  &__nav {
    &__list {
      &__item {
        padding-block: 1rem;
      }
    }
  }
}

// 4) EXTEND (@extend) - con questa regola possiamo riprendere tutto un precedente blocco di una classe / id / elemento

.btn {
  background-color: paleturquoise;
  color: scale-color(paleturquoise, $lightness: -75%);
  padding: $size-1 $size-3;

  font: {
    size: 1.2rem;
    family: inherit;
    weight: 500;
  }

  //   possibilit√† di modificare i colori tramite modulo color di sass:
  //   https://sass-lang.com/documentation/modules/color/#scale
  border: 1px solid scale-color(paleturquoise, $lightness: -25%);
  border-radius: 0;
}

$btn-color-alt: adjust-hue(paleturquoise, 180deg);
.btn-alt {
  @extend .btn;
  background-color: $btn-color-alt;
  border-color: scale-color($btn-color-alt, $lightness: -25%);
  color: scale-color($btn-color-alt, $lightness: -75%);
}

// 5) PLACEHOLDER (%) - serve a definire dei blocchi di regole CSS che applicheranno i loro valori solamente se utilizzati
// i placeholder non utilizzati non entreranno a far parte delle regole nel CSS finale

// vedi partial placeholders

.btn-reset {
  @extend %reset-btn, %reset-font; // questo √® il momento in cui le propriet√† create nel placeholder cominceranno ad esistere nel nostro css finale
}

input,
textarea,
select {
  @extend %reset-font;
}

// 6) MIXINS (@mixin) - un blocco di codice CSS -dinamico-, pu√≤ generarsi anche a partire da valori di parametro

// vedi partials mixins

.box-1 {
  @include box(2px, $secondary-color, 10px);
}

.box-2 {
  @include box(4px, $main-color, 30px);
}
// in SASS c'√® la possibilit√† di valorizzare parametri specifici indipendentemente dalla loro posizione.
// lo richiamo per nome e lo valorizzo
.box-3 {
  @include box($boxColor: palegreen);
}

.box-4 {
  @include dynamicBox(150px, "color", coral);
}

.box-5 {
  @include dynamicBox(
    150px,
    "image",
    url("https://images.unsplash.com/photo-1742943892627-f7e4ddf91224?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  );
}

// CICLI

// CICLO FOR
// @for $i from <start> to <end> ==>  <start> to <end> dove "to" indica che il valore <end> sia ESCLUSO
// @for $i from <start> through <end> ==>  <start> through <end> dove "through" indica che il valore <end> sia INCLUSO

@for $i from 1 through 5 {
  .custom-padding-#{$i} {
    padding: $i * 10px;
  }
}

// CICLO EACH
// @each $varName in $list {}

// LISTE DI VALORI - liste di colori, misure, valori css validi

$colorNames: red, green, blue, yellow, purple, orange;

@each $color in $colorNames {
  .bg-#{$color} {
    background-color: $color;
  }
}

// MAP - lista con coppie chiave-valore
$colorMap: (
  red: #e02c44,
  green: #00803a,
  blue: #0040ff,
  orange: #ff9100
);

// sintassi per un utilizzo con mappe:
// @each $key, $value in $map {}

// in questo caso andiamo a definire due variabili in cui la prima mi conterr√† il nome della propriet√† la seconda il valore corrispondente
// diamogli il nome pi√π appropriato. sapendo di ricevere un colore ho nominato la seconda $color, ma potevo anche chiamarla $value genericamente

@each $key, $color in $colorMap {
  .square-#{$key} {
    background-color: $color;
  }
}
